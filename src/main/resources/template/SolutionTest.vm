package ${packageName}.${problemCategory}._${problemNo}_$problemName;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.Collection;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

@RunWith(Parameterized.class)
public class SolutionTest {

#foreach($paramKv in $paramKvMap.entrySet())
    private $paramKv.key $paramKv.value;
#end

    private $methodReturnType expected;

    private Solution solution;

    public SolutionTest($paramKvStr, $methodReturnType expected) {
    #foreach($paramKv in $paramKvMap.entrySet())
        this.$paramKv.value = $paramKv.value;
    #end
        this.expected = expected;
    }

    @Parameters
    public static Collection<Object[]> testCases() {
        return Arrays.asList(new Object[][]{
        #if(${noTestCases})
            $testCasesStr
        #else
$testCasesStr
        #end
        });
    }

    @Before
    public void setUp() throws Exception {
    #if($solutionDefinitionList.size() == 1)
        $solutionDefinitionList.get(0)
    #else
        #foreach($solutionDefinition in ${solutionDefinitionList})
            #if($!{velocityCount} < $solutionDefinitionList.size())
        $solutionDefinition
            #else
        $solutionDefinition
            #end
        #end
    #end
    }

    @Test
    public void ${methodName}() {
        $methodReturnType actual = solution.${methodName}(${paramNameStr});
        assertThat(actual, is(equalTo(expected)));
    }
}
